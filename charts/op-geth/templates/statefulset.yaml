apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "geth.fullname" . }}
  labels:
    {{- include "geth.labels" . | nindent 4 }}
spec:
  serviceName: {{ template "geth.name" . }}
  selector:
    matchLabels:
      {{- include "geth.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "geth.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
      - name: preprocess
        command: ["/bin/sh", "-c"]
        args:
          - |
            rm -rf {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}/geth/LOCK  # remove lock
            rm -rf {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}/geth/nodekey  # remove nodekey
        image: busybox
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: {{ .Values.persistence.name }}
          mountPath: {{ .Values.persistence.mountDir }}
      - name: import-signer-key
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            if [ -f "{{ .Values.persistence.mountDir }}/init.import-signer-key.done" ]; then
            echo "already initialized"
            ls /root/data
            else
            echo "Signer key import start"
            wget {{ .Values.genesis.url }} -O genesis.json
            geth account import \
              --datadir={{ .Values.persistence.mountDir }}{{ .Values.dataPath }} \
              --password={{ .Values.secretForVolumeMountDir }}/{{ .Values.dataDirPassword.filename }} \
              {{ .Values.secretForVolumeMountDir }}/{{ .Values.blockSignerKey.filename }}
            touch {{ .Values.persistence.mountDir }}/init.import-signer-key.done
            ls {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}
            echo "Signer Key import finished"
            fi
        volumeMounts:
        - name: {{ .Values.persistence.name }}
          mountPath: {{ .Values.persistence.mountDir }}
        - name: {{ include "geth.secretname" . }}
          mountPath: {{ .Values.secretForVolumeMountDir }} # mounts all files in the Secrets.  
      {{- if .Values.genesis.importEnabled }}
      - name: import-genesis
        command: ["/bin/sh", "-c"]
        args:
          - |
            if [ -f "{{ .Values.persistence.mountDir }}/init.import-genesis.done" ]; then
            echo "already initialized"
            ls /root/data
            else
            echo "Chain import start"
            wget {{ .Values.genesis.url }} -O genesis.json
            geth init --datadir={{ .Values.persistence.mountDir }}{{ .Values.dataPath }} genesis.json
            touch {{ .Values.persistence.mountDir }}/init.import-genesis.done
            ls {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}
            echo "Genesis import finished"
            fi
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        volumeMounts:
        - name: {{ .Values.persistence.name }}
          mountPath: {{ .Values.persistence.mountDir }}
      {{- end }}
      containers:
        - name: {{ template "geth.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- if .Values.rpc.http.enabled }}
            # HTTP RPC
            - name: {{ .Values.rpc.http.port.name }}
              containerPort: {{ .Values.rpc.http.port.containerPort }}
            {{- end }}
            {{- if .Values.rpc.ws.enabled }}
            # WS RPC
            - name: {{ .Values.rpc.ws.port.name }}
              containerPort: {{ .Values.rpc.ws.port.containerPort }}
            {{- end }}
            {{- if .Values.authrpc.enabled }}
            # AuthRPC
            - name: {{ .Values.authrpc.port.name }}
              containerPort: {{ .Values.authrpc.port.containerPort }}
            {{- end }}
            {{- if .Values.metrics.enabled }}
            # Metrics
            - name: {{ .Values.metrics.port.name }}
              containerPort: {{ .Values.metrics.port.containerPort }}
            {{- end }}
            {{- if .Values.pprof.enabled }}
            # pprof
            - name: {{ .Values.pprof.port.name }}
              containerPort: {{ .Values.pprof.port.containerPort }}
            {{- end }}
          command: ["/usr/local/bin/geth"]
          args:
            - --datadir={{ .Values.persistence.mountDir }}{{ .Values.dataPath }}
            - --syncmode={{.Values.syncMode}}
            - --gcmode={{.Values.gcMode}}
            - --maxpeers={{ .Values.maxPeers }}
            - --rollup.disabletxpoolgossip={{ .Values.rollup.disableTxPoolGossip }}
            - --password={{ .Values.secretForVolumeMountDir }}/{{ .Values.dataDirPassword.filename }}

            {{- if .Values.allowInsecureUnlock }}
            - --allow-insecure-unlock
            {{- end }}

            {{- if .Values.mine.enabled }}
            - --mine
            - --miner.etherbase={{ .Values.mine.sequencer }}
            - --unlock={{ .Values.mine.sequencer }}
            {{- end }}

            {{- if .Values.noDiscover }}
            - --nodiscover
            {{- end }}

            {{- if .Values.rpc.http.enabled }}
            # HTTP RPC
            - --http
            - --http.api={{.Values.rpc.http.api}}
            - --http.addr={{ .Values.rpc.http.addr }}
            - --http.vhosts={{ .Values.rpc.http.vhosts }}
            - --http.port={{ .Values.rpc.http.port.containerPort }}
            - --http.corsdomain={{ .Values.rpc.http.corsDomain }}
            {{- end }}

            {{- if .Values.rpc.ws.enabled }}
            # WS RPC
            - --ws
            - --ws.addr={{ .Values.rpc.ws.addr }}
            - --ws.port={{.Values.rpc.ws.port.containerPort }}
            - --ws.api={{.Values.rpc.ws.api}}
            - --ws.origins={{.Values.rpc.ws.origins}}
            {{- end }}

            {{- if .Values.networkID }}
            # network settings
            - --networkid={{ .Values.networkID }}
            {{- end }}

            {{- if .Values.authrpc.enabled }}
            # Auth RPC
            - --authrpc.addr={{ .Values.authrpc.addr }}
            - --authrpc.port={{ .Values.authrpc.port.containerPort }}
            - --authrpc.vhosts={{.Values.authrpc.vhosts}}
            - --authrpc.jwtsecret={{ .Values.secretForVolumeMountDir }}/{{.Values.authrpc.jwtSecret.filename}}
            {{- end }}

            {{- if .Values.pprof.enabled }}
            # pprof
            - --pprof
            - --pprof.addr={{ .Values.pprof.addr }}
            - --pprof.port={{ .Values.pprof.port.containerPort }}
            {{- end }}

            {{- if .Values.metrics.enabled }}
            # metrics
            - --metrics
            - --metrics.addr={{ .Values.metrics.addr }}
            - --metrics.port={{ .Values.metrics.port.containerPort }}
            {{- end }}

            {{- with .Values.args }}
            # Other Arguments
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 60
            tcpSocket:
              port: {{ .Values.rpc.http.port.name }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            # TODO: replace it to real http request.
            initialDelaySeconds: 15
            periodSeconds: 60
            tcpSocket:
              port: {{ .Values.rpc.http.port.name }}
          {{- end }}
          volumeMounts:
          - name: {{ .Values.persistence.name }}
            mountPath: {{ .Values.persistence.mountDir }}
          - mountPath: {{ .Values.secretForVolumeMountDir }} # mounts all files in the Secrets.
            name: {{ include "geth.secretname" . }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: {{ include "geth.secretname" . }}
          secret:
            secretName: {{ include "geth.secretname" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.persistence.name }}
      annotations:
        "helm.sh/resource-policy": keep
      labels:
        {{- include "geth.selectorLabels" . | nindent 8 }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
